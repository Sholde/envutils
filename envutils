#!/bin/bash

#
# Copyright 2023 Sholde
#
# SPDX-License-Identifier: GPL-3.0-or-later
#

###
# envutils variables
###
ENVUTILS_VERSION=0.3.0
ENVUTILS_LIST="PATH LD_LIBRARY_PATH LIBRARY_PATH CPATH"
ENVUTILS_ERROR_CODE=0

# omp
ENVUTILS_LIST_OMP=(
    "OMP_SCHEDULE"
    "OMP_NUM_THREADS"
    "OMP_DYNAMIC"
    "OMP_PROC_BIND"
    "OMP_PLACES"
    "OMP_STACKSIZE"
    "OMP_WAIT_POLICY"
    "OMP_MAX_ACTIVE_LEVELS"
    "OMP_NESTED"
    "OMP_THREAD_LIMIT"
    "OMP_CANCELLATION"
    "OMP_DISPLAY_ENV"
    "OMP_DISPLAY_AFFINITY"
    "OMP_AFFINITY_FORMAT"
    "OMP_DEFAULT_DEVICE"
    "OMP_MAX_TASK_PRIORITY"
    "OMP_TARGET_OFFLOAD"
    "OMP_TOOL"
    "OMP_TOOL_LIBRARIES"
    "OMP_DEBUG"
    "OMP_ALLOCATOR"
)

# mpi
ENVUTILS_LIST_MPI=(
    "MPIEXEC_TIMEOUT"
    "MPIEXEC_UNIVERSE_SIZE"
    "MPIEXEC_PORT_RANGE"
    "MPICH_PORT_RANGE"
    "MPIEXEC_PREFIX_DEFAULT"
    "MPIEXEC_PREFIX_STDOUT"
    "MPIEXEC_PREFIX_STDERR"
)

# intel mpi
ENVUTILS_LIST_INTEL_MPI_COMPILE=(
    "I_MPI_CC_PROFILE"
    "I_MPI_CXX_PROFILE"
    "I_MPI_FC_PROFILE"
    "I_MPI_F77_PROFILE"
    "I_MPI_F90_PROFILE"
    "I_MPI_TRACE_PROFILE"
    "I_MPI_CHECK_PROFILE"
    "I_MPI_CHECK_COMPILER"
    "I_MPI_CC"
    "I_MPI_CXX"
    "I_MPI_FC"
    "I_MPI_F77"
    "I_MPI_F90"
    "I_MPI_ROOT"
    "VT_ROOT"
    "I_MPI_COMPILER_CONFIG_DIR"
    "I_MPI_LINK"
    "I_MPI_DEBUG_INFO_STRIP"
    "I_MPI_CFLAGS"
    "I_MPI_CXXFLAGS"
    "I_MPI_FCFLAGS"
    "I_MPI_FLAGS"
    "I_MPI_LDFLAGS"
    "I_MPI_FORT_BIND"
)
ENVUTILS_LIST_INTEL_MPI_HYDRA=(
    "I_MPI_HYDRA_HOST_FILE"
    "I_MPI_HYDRA_HOSTS_GROUP"
    "I_MPI_HYDRA_DEBUG"
    "I_MPI_HYDRA_ENV"
    "I_MPI_JOB_TIMEOUT"
    "I_MPI_JOB_STARTUP_TIMEOUT"
    "I_MPI_JOB_TIMEOUT_SIGNAL"
    "I_MPI_JOB_ABORT_SIGNAL"
    "I_MPI_JOB_SIGNAL_PROPAGATION"
    "I_MPI_HYDRA_BOOTSTRAP"
    "I_MPI_HYDRA_BOOTSTRAP_EXEC"
    "I_MPI_HYDRA_BOOTSTRAP_EXEC_EXTRA_ARGS"
    "I_MPI_HYDRA_BOOTSTRAP_AUTOFORK"
    "I_MPI_HYDRA_RMK"
    "I_MPI_HYDRA_PMI_CONNECT"
    "I_MPI_PERHOST"
    "I_MPI_JOB_TRACE_LIBS"
    "I_MPI_JOB_CHECK_LIBS"
    "I_MPI_HYDRA_BRANCH_COUNT"
    "I_MPI_HYDRA_PMI_AGGREGATE"
    "I_MPI_HYDRA_GDB_REMOTE_SHELL"
    "I_MPI_HYDRA_IFACE"
    "I_MPI_HYDRA_DEMUX"
    "I_MPI_TMPDIR"
    "I_MPI_JOB_RESPECT_PROCESS_PLACEMENT"
    "I_MPI_GTOOL"
    "I_MPI_HYDRA_TOPOLIB"
    "I_MPI_PORT_RANGE"
    "I_MPI_SILENT_ABORT"
    "I_MPI_HYDRA_NAMESERVER"
)
ENVUTILS_LIST_INTEL_MPI_ADJUST=(
    "I_MPI_ADJUST_ALLGATHER"
    "I_MPI_ADJUST_ALLGATHERV"
    "I_MPI_ADJUST_ALLREDUCE"
    "I_MPI_ADJUST_ALLTOALL"
    "I_MPI_ADJUST_ALLTOALLV"
    "I_MPI_ADJUST_ALLTOALLW"
    "I_MPI_ADJUST_BARRIER"
    "I_MPI_ADJUST_BCAST"
    "I_MPI_ADJUST_EXSCAN"
    "I_MPI_ADJUST_GATHER"
    "I_MPI_ADJUST_GATHERV"
    "I_MPI_ADJUST_REDUCE_SCATTER"
    "I_MPI_ADJUST_REDUCE"
    "I_MPI_ADJUST_SCAN"
    "I_MPI_ADJUST_SCATTER"
    "I_MPI_ADJUST_SCATTERV"
    "I_MPI_ADJUST_SENDRECV_REPLACE"
    "I_MPI_ADJUST_IALLGATHER"
    "I_MPI_ADJUST_IALLGATHERV"
    "I_MPI_ADJUST_IALLREDUCE"
    "I_MPI_ADJUST_IALLTOALL"
    "I_MPI_ADJUST_IALLTOALLV"
    "I_MPI_ADJUST_IALLTOALLW"
    "I_MPI_ADJUST_BARRIER"
    "I_MPI_ADJUST_IBCAST"
    "I_MPI_ADJUST_IEXSCAN"
    "I_MPI_ADJUST_IGATHER"
    "I_MPI_ADJUST_IGATHERV"
    "I_MPI_ADJUST_IREDUCE_SCATTER"
    "I_MPI_ADJUST_IREDUCE"
    "I_MPI_ADJUST_ISCAN"
    "I_MPI_ADJUST_ISCATTER"
    "I_MPI_ADJUST_ISCATTERV"
    "I_MPI_ADJUST_ALLGATHER_LIST"
    "I_MPI_ADJUST_ALLGATHERV_LIST"
    "I_MPI_ADJUST_ALLREDUCE_LIST"
    "I_MPI_ADJUST_ALLTOALL_LIST"
    "I_MPI_ADJUST_ALLTOALLV_LIST"
    "I_MPI_ADJUST_ALLTOALLW_LIST"
    "I_MPI_ADJUST_BARRIER_LIST"
    "I_MPI_ADJUST_BCAST_LIST"
    "I_MPI_ADJUST_EXSCAN_LIST"
    "I_MPI_ADJUST_GATHER_LIST"
    "I_MPI_ADJUST_GATHERV_LIST"
    "I_MPI_ADJUST_REDUCE_SCATTER_LIST"
    "I_MPI_ADJUST_REDUCE_LIST"
    "I_MPI_ADJUST_SCAN_LIST"
    "I_MPI_ADJUST_SCATTER_LIST"
    "I_MPI_ADJUST_SCATTERV_LIST"
    "I_MPI_ADJUST_SENDRECV_REPLACE_LIST"
    "I_MPI_ADJUST_IALLGATHER_LIST"
    "I_MPI_ADJUST_IALLGATHERV_LIST"
    "I_MPI_ADJUST_IALLREDUCE_LIST"
    "I_MPI_ADJUST_IALLTOALL_LIST"
    "I_MPI_ADJUST_IALLTOALLV_LIST"
    "I_MPI_ADJUST_IALLTOALLW_LIST"
    "I_MPI_ADJUST_BARRIER_LIST"
    "I_MPI_ADJUST_IBCAST_LIST"
    "I_MPI_ADJUST_IEXSCAN_LIST"
    "I_MPI_ADJUST_IGATHER_LIST"
    "I_MPI_ADJUST_IGATHERV_LIST"
    "I_MPI_ADJUST_IREDUCE_SCATTER_LIST"
    "I_MPI_ADJUST_IREDUCE_LIST"
    "I_MPI_ADJUST_ISCAN_LIST"
    "I_MPI_ADJUST_ISCATTER_LIST"
    "I_MPI_ADJUST_ISCATTERV_LIST"
    "I_MPI_COLL_INTRANODE"
    "I_MPI_COLL_INTRANODE_SHM_THRESHOLD"
    "I_MPI_COLL_EXTERNAL"
    "I_MPI_COLL_DIRECT"
    "I_MPI_CBWR"
)
ENVUTILS_LIST_INTEL_MPI_TUNING=(
    "I_MPI_TUNING_MODE"
    "I_MPI_TUNING_BIN"
    "I_MPI_TUNING_BIN_DUMP"
    "I_MPI_TUNING"
    "I_MPI_TUNING_AUTO_STORAGE_SIZE"
    "I_MPI_TUNING_AUTO_ITER_NUM"
    "I_MPI_TUNING_AUTO_WARMUP_ITER_NUM"
    "I_MPI_TUNING_AUTO_SYNC"
    "I_MPI_TUNING_AUTO_COMM_LIST"
    "I_MPI_TUNING_AUTO_COMM_DEFAULT"
    "I_MPI_TUNING_AUTO_COMM_USER"
    "I_MPI_TUNING_AUTO_ITER_POLICY"
    "I_MPI_TUNING_AUTO_ITER_POLICY_THRESHOLD"
    "I_MPI_TUNING_AUTO_POLICY"
)
ENVUTILS_LIST_INTEL_MPI_PINNING=(
    "I_MPI_PIN"
    "I_MPI_PIN_RESPECT_CPUSET"
    "I_MPI_PIN_RESPECT_HCA"
    "I_MPI_PIN_CELL"
    "I_MPI_PIN_DOMAIN"
    "I_MPI_PIN_ORDER"
)
ENVUTILS_LIST_INTEL_MPI_GPU=(
    "I_MPI_OFFLOAD"
    "I_MPI_OFFLOAD_LEVEL_ZERO_LIBRARY"
)
ENVUTILS_LIST_INTEL_MPI_FABRICS=(
    "I_MPI_FABRICS"
    "I_MPI_SHM"
    "I_MPI_SHM_CELL_FWD_SIZE"
    "I_MPI_SHM_CELL_BWD_SIZE"
    "I_MPI_SHM_CELL_EXT_SIZE"
    "I_MPI_SHM_CELL_FWD_NUM"
    "I_MPI_SHM_CELL_BWD_NUM"
    "I_MPI_SHM_CELL_EXT_NUM_TOTAL"
    "I_MPI_SHM_CELL_FWD_HOLD_NUM"
    "I_MPI_SHM_MCDRAM_LIMIT"
    "I_MPI_SHM_SEND_SPIN_COUNT"
    "I_MPI_SHM_RECV_SPIN_COUNT"
    "I_MPI_SHM_FILE_PREFIX_4K"
    "I_MPI_SHM_FILE_PREFIX_2M"
    "I_MPI_SHM_FILE_PREFIX_1G"
    "I_MPI_OFI_PROVIDER"
    "I_MPI_OFI_PROVIDER_DUMP"
    "I_MPI_OFI_DRECV"
    "I_MPI_OFI_LIBRARY_INTERNAL"
    "I_MPI_OFI_TAG_DYNAMIC"
)
ENVUTILS_LIST_INTEL_MPI_MEM_POLICY_CONTROL=(
    "I_MPI_HBW_POLICY"
    "I_MPI_BIND_NUMA"
    "I_MPI_BIND_ORDER"
    "I_MPI_BIND_WIN_ALLOCATE"
)
ENVUTILS_LIST_INTEL_MPI_ASYNC_PROGRESS=(
    "I_MPI_ASYNC_PROGRESS"
    "I_MPI_ASYNC_PROGRESS_THREADS"
    "I_MPI_ASYNC_PROGRESS_PIN"
    "I_MPI_ASYNC_PROGRESS_ID_KEY"
)
ENVUTILS_LIST_INTEL_MPI_MULTI_EP=(
    "I_MPI_THREAD_SPLIT"
    "I_MPI_THREAD_RUNTIME"
    "I_MPI_THREAD_MAX"
    "I_MPI_THREAD_ID_KEY"
)
ENVUTILS_LIST_INTEL_MPI_OTHERS=(
    "I_MPI_DEBUG"
    "I_MPI_DEBUG_OUTPUT"
    "I_MPI_DEBUG_COREDUMP"
    "I_MPI_STATS"
    "I_MPI_STARTUP_MODE"
    "I_MPI_PMI_LIBRARY"
    "I_MPI_PMI_VALUE_LENGTH_MAX"
    "I_MPI_OUTPUT_CHUNK_SIZE"
    "I_MPI_REMOVED_VAR_WARNING"
    "I_MPI_VAR_CHECK_SPELLING"
    "I_MPI_LIBRARY_KIND"
    "I_MPI_PLATFORM"
    "I_MPI_MALLOC"
    "I_MPI_SHM_HEAP"
    "I_MPI_SHM_HEAP_VSIZE"
    "I_MPI_SHM_HEAP_CSIZE"
    "I_MPI_SHM_HEAP_OPT"
    "I_MPI_WAIT_MODE"
    "I_MPI_THREAD_YIELD"
    "I_MPI_PAUSE_COUNT"
    "I_MPI_SPIN_COUNT"
    "I_MPI_THREAD_SLEEP"
    "I_MPI_EXTRA_FILESYSTEM"
    "I_MPI_EXTRA_FILESYSTEM_FORCE"
    "I_MPI_MULTIRAIL"
)

# pocl
ENVUTILS_LIST_POCL=(
    "POCL_AFFINITY"
    "POCL_BUILDING"
    "POCL_CACHE_DIR"
    "POCL_DEBUG"
    "POCL_DEBUG_LLVM_PASSES"
    "POCL_DEVICES"
    "POCL_BASIC_PARAMETERS"
    "POCL_PTHREAD_PARAMETERS"
    "POCL_TTASIM_PARAMETERS"
    "POCL_TTASIM0_PARAMETERS"
    "POCL_TTASIM1_PARAMETERS"
    "POCL_HSA_PARAMETERS"
    "POCL_EXTRA_BUILD_FLAGS"
    "POCL_IMPLICIT_FINISH"
    "POCL_KERNEL_CACHE"
    "POCL_LEAVE_KERNEL_COMPILER_TEMP_FILES"
    "POCL_MAX_PTHREAD_COUNT"
    "POCL_MAX_WORK_GROUP_SIZE"
    "POCL_MEMORY_LIMIT"
    "POCL_OFFLINE_COMPILE"
    "POCL_VECTORIZER_REMARKS"
    "POCL_WORK_GROUP_METHOD"
    "POCL_SIGFPE_HANDLER"
    "POCL_TRACE_EVENT"
    "POCL_TRACE_EVENT_OPT POCL_TRACE_EVENT_FILTER"
)

###
# helpers
###

# Print empty line
print_empty_line() {
    echo ""
}

# Print ${1} in color if this script prints on stdout and the terminal uses colors
print_red() {
    if [ -t 1 ] && [ "${COLORTERM}" == "truecolor" ] ; then
        echo -ne "\033[1;31m${1}\033[0m"
    else # run on pipe
        echo -n ${1}
    fi
}

print_purple() {
    if [ -t 1 ] && [ "${COLORTERM}" == "truecolor" ] ; then
        echo -ne "\033[1;35m${1}\033[0m"
    else # run on pipe
        echo -n ${1}
    fi
}

print_green() {
    if [ -t 1 ] && [ "${COLORTERM}" == "truecolor" ] ; then
        echo -ne "\033[1;32m${1}\033[0m"
    else # run on pipe
        echo -n ${1}
    fi
}

# Get the shell name
get_shell=$(ps -p ${$} | sed -n 2p | awk '{ print $(NF) }')

# Delete unnecessary colons (:) in ${1} environment variable
clean_env() {
    #
    if [ "${0}" == "${get_shell}" ] ; then
        #
        env_var=${1}
        new_value=$(env | grep "^${env_var}=" 2> /dev/null \
                        | sed -e "s/${env_var}=//g" \
                        | sed -e "s/^::*//g" -e "s/:*:$//g" -e "s/::*/:/g")
        export ${env_var}=${new_value}
    else
        print_red "Error: please 'source' this script in the way to set envrinoment variables\n"
        print_red "Try: source ${0}\n"
        ENVUTILS_ERROR_CODE=1
    fi
}

###
# Script
###
if [ "${#}" -ne "0" ] ; then
    case ${1} in
        -v | --version)
            # Print version
            echo "envutils (ENVUTILS) ${ENVUTILS_VERSION}"
            echo "GNU General Public License v3.0"
            ;;

        -h | --help)
            # Print help
            echo "Usage: envutils [options] [variable] ..."
            echo ""
            echo "Without option:                   Print the PATH of all directories in all environment "
            echo "                                  variables in ENVUTILS_LIST"
            echo ""
            echo "Options:"
            echo "    -v, --version                 Display the version"
            echo "    -h, --help                    Display this help"
            echo "    -l, --list [ENV_VAR]          Display the list of standard environment variables handled by envutils "
            echo "                                  if ENV_VAR is not specified, else display the list of environment "
            echo "                                  variables of following packages: omp, mpi, impi, pocl"
            echo "    -s, --show ENV_VAR            Display the content of ENV_VAR environment variable"
            echo "    -sc, --show-content ENV_VAR   Display the content of all directories in ENV_VAR environment variable"
            echo "    -sac, --show-all-content      Display the contents of all directories in all environment "
            echo "                                  variables in ENVUTILS_LIST"
            echo "    -f, --find SYMBOL             Find the symbol SYMBOL in all directories in ENVUTILS_LIST"
            echo "    -c, --clean [ENV_VAR]         Delete unnecessary colons (:) in ENV_VAR"
            echo "    --install PATH                Install PATH to standard environment variables"
            echo "    --uninstall PATH              Uninstall PATH from standard environment variables"
            echo "    --install-bin PATH            Install PATH to PATH environment variable"
            echo "    --install-lib PATH            Install PATH to LD_LIBRARIES_PATH and LIBRARIES_PATH environment variables"
            echo "    --install-inc PATH            Install PATH to CPATH environment variable"
            echo "    --uninstall-bin PATH          Uninstall PATH from PATH environment variable"
            echo "    --uninstall-lib PATH          Uninstall PATH from LD_LIBRARIES_PATH and LIBRARIES_PATH environment variables"
            echo "    --uninstall-inc PATH          Uninstall PATH from CPATH environment variable"
            echo "    --omp                         Display the content of all OpenMP environment variables"
            echo "    --mpi                         Display the content of all MPI environment variables (not really supported)"
            echo "    --intel-mpi                   Display the content of all Intel MPI environment variables"
            echo "    --pocl                        Display the content of all POCL environment variables"
            echo ""
            echo "NOTE: variables surrounded by brackets [] are optional."
            ;;

        -l | --list)
            # Display the list of environment variables handled by envutils
            if [ -z "${2}" ] ; then
                for env_var in ${ENVUTILS_LIST} ; do
                    echo "${env_var}"
                done
            else
                if [ ${2} == "omp" ] ; then
                    for env_var in ${ENVUTILS_LIST_OMP[@]} ; do
                        get_value=$(env | grep "^${env_var}=" 2> /dev/null)
                        get_value=${get_value#*=}
                        if [ -z "${get_value}" ] ; then
                            print_red ${env_var}
                            print_empty_line
                        else
                            print_green ${env_var}
                            print_empty_line
                        fi
                    done
                elif [ "${2}" == "mpi" ] ; then
                    for env_var in ${ENVUTILS_LIST_MPI[@]} ; do
                        get_value=$(env | grep "^${env_var}=" 2> /dev/null)
                        get_value=${get_value#*=}
                        if [ -z "${get_value}" ] ; then
                            print_red ${env_var}
                            print_empty_line
                        else
                            print_green ${env_var}
                            print_empty_line
                        fi
                    done
                elif [ "${2}" == "impi" ] || [ "${2}" == "intel-mpi" ] ; then
                    # Compilation
                    name_section="Compilation"
                    echo ${name_section}
                    for i in $(seq 1 1 ${#name_section}) ; do
                        echo -n "="
                    done
                    print_empty_line
                    for env_var in ${ENVUTILS_LIST_INTEL_MPI_COMPILE[@]} ; do
                        get_value=$(env | grep "^${env_var}=" 2> /dev/null)
                        get_value=${get_value#*=}
                        if [ -z "${get_value}" ] ; then
                            print_red ${env_var}
                            print_empty_line
                        else
                            print_green ${env_var}
                            print_empty_line
                        fi
                    done
                    print_empty_line

                    # Hydra
                    name_section="Hydra"
                    echo ${name_section}
                    for i in $(seq 1 1 ${#name_section}) ; do
                        echo -n "="
                    done
                    print_empty_line
                    for env_var in ${ENVUTILS_LIST_INTEL_MPI_HYDRA[@]} ; do
                        get_value=$(env | grep "^${env_var}=" 2> /dev/null)
                        get_value=${get_value#*=}
                        if [ -z "${get_value}" ] ; then
                            print_red ${env_var}
                            print_empty_line
                        else
                            print_green ${env_var}
                            print_empty_line
                        fi
                    done
                    print_empty_line

                    # Adjust
                    name_section="Adjust"
                    echo ${name_section}
                    for i in $(seq 1 1 ${#name_section}) ; do
                        echo -n "="
                    done
                    print_empty_line
                    for env_var in ${ENVUTILS_LIST_INTEL_MPI_ADJUST[@]} ; do
                        get_value=$(env | grep "^${env_var}=" 2> /dev/null)
                        get_value=${get_value#*=}
                        if [ -z "${get_value}" ] ; then
                            print_red ${env_var}
                            print_empty_line
                        else
                            print_green ${env_var}
                            print_empty_line
                        fi
                    done
                    print_empty_line

                    # Tuning
                    name_section="Tuning"
                    echo ${name_section}
                    for i in $(seq 1 1 ${#name_section}) ; do
                        echo -n "="
                    done
                    print_empty_line
                    for env_var in ${ENVUTILS_LIST_INTEL_MPI_TUNING[@]} ; do
                        get_value=$(env | grep "^${env_var}=" 2> /dev/null)
                        get_value=${get_value#*=}
                        if [ -z "${get_value}" ] ; then
                            print_red ${env_var}
                            print_empty_line
                        else
                            print_green ${env_var}
                            print_empty_line
                        fi
                    done
                    print_empty_line

                    # Pinning
                    name_section="Pinning"
                    echo ${name_section}
                    for i in $(seq 1 1 ${#name_section}) ; do
                        echo -n "="
                    done
                    print_empty_line
                    for env_var in ${ENVUTILS_LIST_INTEL_MPI_PINNING[@]} ; do
                        get_value=$(env | grep "^${env_var}=" 2> /dev/null)
                        get_value=${get_value#*=}
                        if [ -z "${get_value}" ] ; then
                            print_red ${env_var}
                            print_empty_line
                        else
                            print_green ${env_var}
                            print_empty_line
                        fi
                    done
                    print_empty_line

                    # Gpu
                    name_section="Gpu"
                    echo ${name_section}
                    for i in $(seq 1 1 ${#name_section}) ; do
                        echo -n "="
                    done
                    print_empty_line
                    for env_var in ${ENVUTILS_LIST_INTEL_MPI_GPU[@]} ; do
                        get_value=$(env | grep "^${env_var}=" 2> /dev/null)
                        get_value=${get_value#*=}
                        if [ -z "${get_value}" ] ; then
                            print_red ${env_var}
                            print_empty_line
                        else
                            print_green ${env_var}
                            print_empty_line
                        fi
                    done
                    print_empty_line

                    # Fabrics
                    name_section="Fabrics"
                    echo ${name_section}
                    for i in $(seq 1 1 ${#name_section}) ; do
                        echo -n "="
                    done
                    print_empty_line
                    for env_var in ${ENVUTILS_LIST_INTEL_MPI_FABRICS[@]} ; do
                        get_value=$(env | grep "^${env_var}=" 2> /dev/null)
                        get_value=${get_value#*=}
                        if [ -z "${get_value}" ] ; then
                            print_red ${env_var}
                            print_empty_line
                        else
                            print_green ${env_var}
                            print_empty_line
                        fi
                    done
                    print_empty_line

                    # Memory Policy Control
                    name_section="Memory Policy Control"
                    echo ${name_section}
                    for i in $(seq 1 1 ${#name_section}) ; do
                        echo -n "="
                    done
                    print_empty_line
                    for env_var in ${ENVUTILS_LIST_INTEL_MPI_MEM_POLICY_CONTROL[@]} ; do
                        get_value=$(env | grep "^${env_var}=" 2> /dev/null)
                        get_value=${get_value#*=}
                        if [ -z "${get_value}" ] ; then
                            print_red ${env_var}
                            print_empty_line
                        else
                            print_green ${env_var}
                            print_empty_line
                        fi
                    done
                    print_empty_line

                    # Asynchronous Progress Control
                    name_section="Asynchronous Progress Control"
                    echo ${name_section}
                    for i in $(seq 1 1 ${#name_section}) ; do
                        echo -n "="
                    done
                    print_empty_line
                    for env_var in ${ENVUTILS_LIST_INTEL_MPI_ASYNC_PROGRESS[@]} ; do
                        get_value=$(env | grep "^${env_var}=" 2> /dev/null)
                        get_value=${get_value#*=}
                        if [ -z "${get_value}" ] ; then
                            print_red ${env_var}
                            print_empty_line
                        else
                            print_green ${env_var}
                            print_empty_line
                        fi
                    done
                    print_empty_line

                    # Multi-Ep
                    name_section="Multi-EP"
                    echo ${name_section}
                    for i in $(seq 1 1 ${#name_section}) ; do
                        echo -n "="
                    done
                    print_empty_line
                    for env_var in ${ENVUTILS_LIST_INTEL_MPI_MULTI_EP[@]} ; do
                        get_value=$(env | grep "^${env_var}=" 2> /dev/null)
                        get_value=${get_value#*=}
                        if [ -z "${get_value}" ] ; then
                            print_red ${env_var}
                            print_empty_line
                        else
                            print_green ${env_var}
                            print_empty_line
                        fi
                    done
                    print_empty_line

                    # Others
                    name_section="Others"
                    echo ${name_section}
                    for i in $(seq 1 1 ${#name_section}) ; do
                        echo -n "="
                    done
                    print_empty_line
                    for env_var in ${ENVUTILS_LIST_INTEL_MPI_OTHERS[@]} ; do
                        get_value=$(env | grep "^${env_var}=" 2> /dev/null)
                        get_value=${get_value#*=}
                        if [ -z "${get_value}" ] ; then
                            print_red ${env_var}
                            print_empty_line
                        else
                            print_green ${env_var}
                            print_empty_line
                        fi
                    done
                    print_empty_line
                elif [ "${2}" == "pocl" ] ; then
                    for env_var in ${ENVUTILS_LIST_POCL[@]} ; do
                        get_value=$(env | grep "^${env_var}=" 2> /dev/null)
                        get_value=${get_value#*=}
                        if [ -z "${get_value}" ] ; then
                            print_red ${env_var}
                            print_empty_line
                        else
                            print_green ${env_var}
                            print_empty_line
                        fi
                    done
                else
                    ENVUTILS_ERROR_CODE=1
                fi
            fi
            ;;

        -s | --show)
            # Display the content of ${2} environment variable
            env_var=${2}
            # Check if the variable is set
            list_dirs=$(env | grep "^${env_var}=" 2> /dev/null)
            list_dirs=${list_dirs#*=}
            if [ ! -z "${list_dirs}" ] ; then
                # Print the environment variable
                echo "${env_var}"
                for i in $(seq 1 1 ${#env_var}) ; do
                    echo -n "="
                done
                print_empty_line

                # Set the delimiter to :
                old_ifs=${IFS}
                IFS=:

                # Visit all directories in $env_var
                for dir in ${list_dirs} ; do
                    if [ -d ${dir} ] ; then
                        ls --color=auto -d ${dir} 2> /dev/null
                    else
                        echo -n ${dir}
                        echo -n " -- "
                        print_red "Warning: this is not a directory"
                        print_empty_line
                    fi
                done

                #
                print_empty_line
                IFS=${old_ifs}
            fi
            ;;

        -sc | --show-content)
            # Display the content of all directories in ${2} environment variable
            env_var=${2}
            # Check if the variable is set
            list_dirs=$(env | grep "^${env_var}=" 2> /dev/null)
            list_dirs=${list_dirs#*=}
            if [ ! -z "${list_dirs}" ] ; then
                # Print the environment variable
                echo "${env_var}"
                for i in $(seq 1 1 ${#env_var}) ; do
                    echo -n "="
                done
                print_empty_line

                # Set the delimiter to :
                old_ifs=${IFS}
                IFS=:

                # Visit all directories in $env_var
                for dir in ${list_dirs} ; do
                    if [ -d ${dir} ] ; then
                        ls --color=auto -d ${dir} 2> /dev/null
                        ls --color=auto ${dir}
                    else
                        echo -n ${dir}
                        echo -n " -- "
                        print_red "Warning: this is not a directory"
                        print_empty_line
                    fi
                    print_empty_line
                done

                #
                IFS=${old_ifs}
            fi
            ;;

        -sac | --show-all-content)
            # Display the contents of all directories in all environment variables in ENVUTILS_LIST
            for env_var in ${ENVUTILS_LIST} ; do
                # Check if the variable is set
                list_dirs=$(env | grep "^${env_var}=" 2> /dev/null)
                list_dirs=${list_dirs#*=}
                if [ ! -z "${list_dirs}" ] ; then
                    # Print the environment variable
                    echo "${env_var}"
                    for i in $(seq 1 1 ${#env_var}) ; do
                        echo -n "="
                    done
                    print_empty_line

                    # Set the delimiter to :
                    old_ifs=${IFS}
                    IFS=:

                    # Visit all directories in $env_var
                    for dir in ${list_dirs} ; do
                        if [ -d ${dir} ] ; then
                            ls --color=auto -d ${dir} 2> /dev/null
                            ls --color=auto ${dir}
                        else
                            echo -n ${dir}
                            echo -n " -- "
                            print_red "Warning: this is not a directory"
                            print_empty_line
                        fi
                        print_empty_line
                    done

                    #
                    IFS=${old_ifs}
                fi
            done
            ;;

        -f | --find)
            # Find the symbol in all directories in ENVUTILS_LIST
            symbol=${2}
            for env_var in ${ENVUTILS_LIST} ; do
                # Print the name of env_var if we found the symbol in one of its directories
                is_first=1

                # Check if the variable is set
                list_dirs=$(env | grep "^${env_var}=" 2> /dev/null)
                list_dirs=${list_dirs#*=}
                if [ ! -z "${list_dirs}" ] ; then
                    # Set the delimiter to :
                    old_ifs=${IFS}
                    IFS=:

                    # Visit all directories in $env_var
                    for dir in ${list_dirs} ; do
                        # Check if dir is a directory
                        if [ -d ${dir} ] ; then
                            #
                            found=$(ls --format=single-column -d ${dir}/${symbol} 2> /dev/null)

                            # Test if we found a symbol
                            if [ ! -z "${found}" ] ; then
                                # First
                                if [ "${is_first}" == "1" ] ; then
                                    # Store the IFS value on the second restoration variable
                                    old_old_ifs=${IFS}
                                    unset IFS

                                    # Print the environment variable
                                    echo "${env_var}"
                                    for i in $(seq 1 1 ${#env_var}) ; do
                                        echo -n "="
                                    done
                                    print_empty_line

                                    #
                                    is_first=0

                                    # Reset IFS with the second restoration variable
                                    IFS=${old_old_ifs}
                                fi

                                # Print the finding path
                                ls --format=single-column -d --color=auto ${dir}/${symbol} 2> /dev/null
                            fi

                            # Reset found for the next iteration
                            found=""
                        fi
                    done

                    # Reset the IFS value with the old value
                    IFS=${old_ifs}
                fi

                #
                if [ ${is_first} -eq 0 ] ; then
                    print_empty_line
                fi
            done
            ;;

        --clean)
            # Delete unnecessary colons (:) in ${2}
            if [ "${#}" -ne "2" ] ; then
                # clean all environment variables in ENVUTILS_LIST
                for env_var in ${ENVUTILS_LIST} ; do
                    clean_env ${env_var}
                done
            else
                # clean only ENV_VAR
                clean_env ${2}
            fi
            ;;

        --install)
            # Install ${2} to standard environment variables
            to_install=${2}
            if [[ ${to_install:0:1} != "/" ]] ; then
                pwd_path=$(pwd)
                to_install=${pwd_path}/${to_install}
            fi

            # Test if the script is sourced
            if [ ${0} != "${BASH_SOURCE}" ] ; then
                # Export variables
                export PATH=${to_install}/bin:${PATH}
                export LD_LIBRARY_PATH=${to_install}/lib:${LD_LIBRARY_PATH}
                export LIBRARY_PATH=${to_install}/lib:${LIBRARY_PATH}
                if [ -d ${to_install}/lib64 ] ; then
                    export LD_LIBRARY_PATH=${to_install}/lib64:${LD_LIBRARY_PATH}
                    export LIBRARY_PATH=${to_install}/lib64:${LIBRARY_PATH}
                fi
                export CPATH=${to_install}/include:${CPATH}

                # Emit a warning if it is not a directory
                if [ ! -d ${to_install} ] ; then
                    print_purple "Warning: ${to_install} is not a direcotry\n"
                fi
            else
                print_red "Error: please 'source' this script in the way to set envrinoment variables\n"
                print_red "Try: source ${0}\n"
                ENVUTILS_ERROR_CODE=1
            fi
            ;;

        --install-bin)
            # Install ${2} to standard environment variables
            to_install=${2}
            if [[ ${to_install:0:1} != "/" ]] ; then
                pwd_path=$(pwd)
                to_install=${pwd_path}/${to_install}
            fi

            # Test if the script is sourced
            if [ ${0} != "${BASH_SOURCE}" ] ; then
                # Export variables
                export PATH=${to_install}/bin:${PATH}

                # Emit a warning if it is not a directory
                if [ ! -d ${to_install} ] ; then
                    print_purple "Warning: ${to_install} is not a direcotry\n"
                fi
            else
                print_red "Error: please 'source' this script in the way to set envrinoment variables\n"
                print_red "Try: source ${0}\n"
                ENVUTILS_ERROR_CODE=1
            fi
            ;;

        --install-lib)
            # Install ${2} to standard environment variables
            to_install=${2}
            if [[ ${to_install:0:1} != "/" ]] ; then
                pwd_path=$(pwd)
                to_install=${pwd_path}/${to_install}
            fi

            # Test if the script is sourced
            if [ ${0} != "${BASH_SOURCE}" ] ; then
                # Export variables
                export LD_LIBRARY_PATH=${to_install}/lib:${LD_LIBRARY_PATH}
                export LIBRARY_PATH=${to_install}/lib:${LIBRARY_PATH}
                if [ -d ${to_install}/lib64 ] ; then
                    export LD_LIBRARY_PATH=${to_install}/lib64:${LD_LIBRARY_PATH}
                    export LIBRARY_PATH=${to_install}/lib64:${LIBRARY_PATH}
                fi

                # Emit a warning if it is not a directory
                if [ ! -d ${to_install} ] ; then
                    print_purple "Warning: ${to_install} is not a direcotry\n"
                fi
            else
                print_red "Error: please 'source' this script in the way to set envrinoment variables\n"
                print_red "Try: source ${0}\n"
                ENVUTILS_ERROR_CODE=1
            fi
            ;;

        --install-inc)
            # Install ${2} to standard environment variables
            to_install=${2}
            if [[ ${to_install:0:1} != "/" ]] ; then
                pwd_path=$(pwd)
                to_install=${pwd_path}/${to_install}
            fi

            # Test if the script is sourced
            if [ ${0} != "${BASH_SOURCE}" ] ; then
                # Export variables
                export CPATH=${to_install}/include:${CPATH}

                # Emit a warning if it is not a directory
                if [ ! -d ${to_install} ] ; then
                    print_purple "Warning: ${to_install} is not a direcotry\n"
                fi
            else
                print_red "Error: please 'source' this script in the way to set envrinoment variables\n"
                print_red "Try: source ${0}\n"
                ENVUTILS_ERROR_CODE=1
            fi
            ;;

        --uninstall)
            # Uninstall ${2} from standard environment variables
            to_uninstall=${2}
            if [[ ${to_uninstall:0:1} != "/" ]] ; then
                pwd_path=$(pwd)
                to_uninstall=${pwd_path}/${to_uninstall}
            fi

            # Test if the script is sourced
            if [ ${0} != "${BASH_SOURCE}" ] ; then
                # Export variables
                export PATH=$(echo ${PATH} | sed "s+${to_uninstall}/bin++g")
                export LD_LIBRARY_PATH=$(echo ${LD_LIBRARY_PATH} | sed "s+${to_uninstall}/lib++g")
                export LIBRARY_PATH=$(echo ${LIBRARY_PATH} | sed "s+${to_uninstall}/lib++g")
                if [ -d ${to_install}/lib64 ] ; then
                    export LD_LIBRARY_PATH=$(echo ${LD_LIBRARY_PATH} | sed "s+${to_uninstall}/lib64++g")
                    export LIBRARY_PATH=$(echo ${LD_LIBRARY_PATH} | sed "s+${to_uninstall}/lib64++g")
                fi
                export CPATH=$(echo ${CPATH} | sed "s+${to_uninstall}/include++g")

                # clean all environment variables in ENVUTILS_LIST
                for env_var in ${ENVUTILS_LIST} ; do
                    clean_env ${env_var}
                done

                #
                if [[ -z ${PATH} ]] ; then
                    unset PATH
                fi
                if [[ -z ${LD_LIBRARY_PATH} ]] ; then
                    unset LD_LIBRARY_PATH
                fi
                if [[ -z ${LIBRARY_PATH} ]] ; then
                    unset LIBRARY_PATH
                fi
                if [[ -z ${CPATH} ]] ; then
                    unset CPATH
                fi
            else
                print_red "Error: please 'source' this script in the way to set envrinoment variables\n"
                print_red "Try: source ${0}\n"
                ENVUTILS_ERROR_CODE=1
            fi
            ;;

        --uninstall-bin)
            # Uninstall ${2} from standard environment variables
            to_uninstall=${2}
            if [[ ${to_uninstall:0:1} != "/" ]] ; then
                pwd_path=$(pwd)
                to_uninstall=${pwd_path}/${to_uninstall}
            fi

            # Test if the script is sourced
            if [ ${0} != "${BASH_SOURCE}" ] ; then
                # Export variables
                export PATH=$(echo ${PATH} | sed "s+${to_uninstall}/bin++g")

                # clean all environment variables in ENVUTILS_LIST
                for env_var in ${ENVUTILS_LIST} ; do
                    clean_env ${env_var}
                done

                #
                if [[ -z ${PATH} ]] ; then
                    unset PATH
                fi
                if [[ -z ${LD_LIBRARY_PATH} ]] ; then
                    unset LD_LIBRARY_PATH
                fi
                if [[ -z ${LIBRARY_PATH} ]] ; then
                    unset LIBRARY_PATH
                fi
                if [[ -z ${CPATH} ]] ; then
                    unset CPATH
                fi
            else
                print_red "Error: please 'source' this script in the way to set envrinoment variables\n"
                print_red "Try: source ${0}\n"
                ENVUTILS_ERROR_CODE=1
            fi
            ;;

        --uninstall-lib)
            # Uninstall ${2} from standard environment variables
            to_uninstall=${2}
            if [[ ${to_uninstall:0:1} != "/" ]] ; then
                pwd_path=$(pwd)
                to_uninstall=${pwd_path}/${to_uninstall}
            fi

            # Test if the script is sourced
            if [ ${0} != "${BASH_SOURCE}" ] ; then
                # Export variables
                export LD_LIBRARY_PATH=$(echo ${LD_LIBRARY_PATH} | sed "s+${to_uninstall}/lib++g")
                export LIBRARY_PATH=$(echo ${LIBRARY_PATH} | sed "s+${to_uninstall}/lib++g")
                if [ -d ${to_install}/lib64 ] ; then
                    export LD_LIBRARY_PATH=$(echo ${LD_LIBRARY_PATH} | sed "s+${to_uninstall}/lib64++g")
                    export LIBRARY_PATH=$(echo ${LD_LIBRARY_PATH} | sed "s+${to_uninstall}/lib64++g")
                fi

                # clean all environment variables in ENVUTILS_LIST
                for env_var in ${ENVUTILS_LIST} ; do
                    clean_env ${env_var}
                done

                #
                if [[ -z ${PATH} ]] ; then
                    unset PATH
                fi
                if [[ -z ${LD_LIBRARY_PATH} ]] ; then
                    unset LD_LIBRARY_PATH
                fi
                if [[ -z ${LIBRARY_PATH} ]] ; then
                    unset LIBRARY_PATH
                fi
                if [[ -z ${CPATH} ]] ; then
                    unset CPATH
                fi
            else
                print_red "Error: please 'source' this script in the way to set envrinoment variables\n"
                print_red "Try: source ${0}\n"
                ENVUTILS_ERROR_CODE=1
            fi
            ;;

        --uninstall-inc)
            # Uninstall ${2} from standard environment variables
            to_uninstall=${2}
            if [[ ${to_uninstall:0:1} != "/" ]] ; then
                pwd_path=$(pwd)
                to_uninstall=${pwd_path}/${to_uninstall}
            fi

            # Test if the script is sourced
            if [ ${0} != "${BASH_SOURCE}" ] ; then
                # Export variables
                export CPATH=$(echo ${CPATH} | sed "s+${to_uninstall}/include++g")

                # clean all environment variables in ENVUTILS_LIST
                for env_var in ${ENVUTILS_LIST} ; do
                    clean_env ${env_var}
                done

                #
                if [[ -z ${PATH} ]] ; then
                    unset PATH
                fi
                if [[ -z ${LD_LIBRARY_PATH} ]] ; then
                    unset LD_LIBRARY_PATH
                fi
                if [[ -z ${LIBRARY_PATH} ]] ; then
                    unset LIBRARY_PATH
                fi
                if [[ -z ${CPATH} ]] ; then
                    unset CPATH
                fi
            else
                print_red "Error: please 'source' this script in the way to set envrinoment variables\n"
                print_red "Try: source ${0}\n"
                ENVUTILS_ERROR_CODE=1
            fi
            ;;

        --omp)
            # Display the content of all OpenMP environment variables
            for omp_env_var in ${ENVUTILS_LIST_OMP[@]} ; do
                get_line=$(env | grep "^${omp_env_var}=" 2> /dev/null)
                if [ ! -z "${get_line}" ] ; then
                    echo ${get_line}
                fi
            done
            ;;

        --mpi)
            # Display the content of all MPI environment variables (not really supported)
            for mpi_env_var in ${ENVUTILS_LIST_MPI[@]} ; do
                get_line=$(env | grep "^${mpi_env_var}=" 2> /dev/null)
                if [ ! -z "${get_line}" ] ; then
                    echo ${get_line}
                fi
            done
            ;;

        --intel-mpi)
            # Display the content of all Intel MPI environment variables

            # Compilation
            name_section="Compilation"
            is_first=1
            for mpi_env_var in ${ENVUTILS_LIST_INTEL_MPI_COMPILE[@]} ; do
                get_line=$(env | grep "^${mpi_env_var}=" 2> /dev/null)
                if [ ! -z "${get_line}" ] ; then
                    if [ "${is_first}" == "1" ] ; then
                        echo ${name_section}
                        for i in $(seq 1 1 ${#name_section}) ; do
                            echo -n "="
                        done
                        print_empty_line
                        is_first=0
                    fi
                    echo ${get_line}
                fi
            done

            # Hydra
            name_section="Hydra"
            is_first=1
            for mpi_env_var in ${ENVUTILS_LIST_INTEL_MPI_HYDRA[@]} ; do
                get_line=$(env | grep "^${mpi_env_var}=" 2> /dev/null)
                if [ ! -z "${get_line}" ] ; then
                    if [ "${is_first}" == "1" ] ; then
                        echo ${name_section}
                        for i in $(seq 1 1 ${#name_section}) ; do
                            echo -n "="
                        done
                        print_empty_line
                        is_first=0
                    fi
                    echo ${get_line}
                fi
            done

            # Adjust
            name_section="Adjust"
            is_first=1
            for mpi_env_var in ${ENVUTILS_LIST_INTEL_MPI_ADJUST[@]} ; do
                get_line=$(env | grep "^${mpi_env_var}=" 2> /dev/null)
                if [ ! -z "${get_line}" ] ; then
                    if [ "${is_first}" == "1" ] ; then
                        echo ${name_section}
                        for i in $(seq 1 1 ${#name_section}) ; do
                            echo -n "="
                        done
                        print_empty_line
                        is_first=0
                    fi
                    echo ${get_line}
                fi
            done

            # Tunning
            name_section="Tunning"
            is_first=1
            for mpi_env_var in ${ENVUTILS_LIST_INTEL_MPI_TUNING[@]} ; do
                get_line=$(env | grep "^${mpi_env_var}=" 2> /dev/null)
                if [ ! -z "${get_line}" ] ; then
                    if [ "${is_first}" == "1" ] ; then
                        echo ${name_section}
                        for i in $(seq 1 1 ${#name_section}) ; do
                            echo -n "="
                        done
                        print_empty_line
                        is_first=0
                    fi
                    echo ${get_line}
                fi
            done

            # Pinning
            name_section="Pinning"
            is_first=1
            for mpi_env_var in ${ENVUTILS_LIST_INTEL_MPI_PINNING[@]} ; do
                get_line=$(env | grep "^${mpi_env_var}=" 2> /dev/null)
                if [ ! -z "${get_line}" ] ; then
                    if [ "${is_first}" == "1" ] ; then
                        echo ${name_section}
                        for i in $(seq 1 1 ${#name_section}) ; do
                            echo -n "="
                        done
                        print_empty_line
                        is_first=0
                    fi
                    echo ${get_line}
                fi
            done

            # GPU
            name_section="GPU"
            is_first=1
            for mpi_env_var in ${ENVUTILS_LIST_INTEL_MPI_GPU[@]} ; do
                get_line=$(env | grep "^${mpi_env_var}=" 2> /dev/null)
                if [ ! -z "${get_line}" ] ; then
                    if [ "${is_first}" == "1" ] ; then
                        echo ${name_section}
                        for i in $(seq 1 1 ${#name_section}) ; do
                            echo -n "="
                        done
                        print_empty_line
                        is_first=0
                    fi
                    echo ${get_line}
                fi
            done

            # Fabrics
            name_section="Fabrics"
            is_first=1
            for mpi_env_var in ${ENVUTILS_LIST_INTEL_MPI_FABRICS[@]} ; do
                get_line=$(env | grep "^${mpi_env_var}=" 2> /dev/null)
                if [ ! -z "${get_line}" ] ; then
                    if [ "${is_first}" == "1" ] ; then
                        echo ${name_section}
                        for i in $(seq 1 1 ${#name_section}) ; do
                            echo -n "="
                        done
                        print_empty_line
                        is_first=0
                    fi
                    echo ${get_line}
                fi
            done

            # Memory Policy Control
            name_section="Memory Policy Control"
            is_first=1
            for mpi_env_var in ${ENVUTILS_LIST_INTEL_MPI_MEM_POLICY_CONTROL[@]} ; do
                get_line=$(env | grep "^${mpi_env_var}=" 2> /dev/null)
                if [ ! -z "${get_line}" ] ; then
                    if [ "${is_first}" == "1" ] ; then
                        echo ${name_section}
                        for i in $(seq 1 1 ${#name_section}) ; do
                            echo -n "="
                        done
                        print_empty_line
                        is_first=0
                    fi
                    echo ${get_line}
                fi
            done

            # Asynchronous Progress Control
            name_section="Asynchronous Progress Control"
            is_first=1
            for mpi_env_var in ${ENVUTILS_LIST_INTEL_MPI_ASYNC_PROGRESS[@]} ; do
                get_line=$(env | grep "^${mpi_env_var}=" 2> /dev/null)
                if [ ! -z "${get_line}" ] ; then
                    if [ "${is_first}" == "1" ] ; then
                        echo ${name_section}
                        for i in $(seq 1 1 ${#name_section}) ; do
                            echo -n "="
                        done
                        print_empty_line
                        is_first=0
                    fi
                    echo ${get_line}
                fi
             done

            # Multi-EP
            name_section="Multi-EP"
            is_first=1
            for mpi_env_var in ${ENVUTILS_LIST_INTEL_MPI_MULTI_EP[@]} ; do
                get_line=$(env | grep "^${mpi_env_var}=" 2> /dev/null)
                if [ ! -z "${get_line}" ] ; then
                    if [ "${is_first}" == "1" ] ; then
                        echo ${name_section}
                        for i in $(seq 1 1 ${#name_section}) ; do
                            echo -n "="
                        done
                        print_empty_line
                        is_first=0
                    fi
                    echo ${get_line}
                fi
            done

            # Others
            name_section="Others"
            is_first=1
            for mpi_env_var in ${ENVUTILS_LIST_INTEL_MPI_OTHERS[@]} ; do
                get_line=$(env | grep "^${mpi_env_var}=" 2> /dev/null)
                if [ ! -z "${get_line}" ] ; then
                    if [ "${is_first}" == "1" ] ; then
                        echo ${name_section}
                        for i in $(seq 1 1 ${#name_section}) ; do
                            echo -n "="
                        done
                        print_empty_line
                        is_first=0
                    fi
                    echo ${get_line}
                fi
            done
            ;;

        --pocl)
            # Display the content of all POCL environment variables
            for pocl_env_var in ${ENVUTILS_LIST_POCL[@]} ; do
                get_line=$(env | grep "^${pocl_env_var}=" 2> /dev/null)
                if [ ! -z "${get_line}" ] ; then
                    echo ${get_line}
                fi
            done
            ;;

        *)
            # Error
            echo "Unknown option '${1}'"
            echo "Try 'envutils --help' for more information."
            ENVUTILS_ERROR_CODE=1
            ;;
    esac
else
    # Default - Print the PATH of all directories in all environment variables in ENVUTILS_LIST
    for env_var in ${ENVUTILS_LIST} ; do
        # Check if the variable is set
        list_dirs=$(env | grep "^${env_var}=" 2> /dev/null)
        list_dirs=${list_dirs#*=}
        if [ ! -z "${list_dirs}" ] ; then
            # Prevent case ":"
            if [ "${list_dirs}" != ":" ] ; then
                # Print the environment variable
                echo "${env_var}"
                for i in $(seq 1 1 ${#env_var}) ; do
                    echo -n "="
                done
                print_empty_line

                # Set the delimiter to :
                old_ifs=${IFS}
                IFS=:

                # Visit all directories in $env_var
                for dir in ${list_dirs} ; do
                    # Prevent case ":path", "path:" and ":path:"
                    if [ "${dir}" != "" ] ; then
                        if [ -d ${dir} ] ; then
                            ls --color=auto -d ${dir} 2> /dev/null
                        else
                            echo -n ${dir}
                            echo -n " -- "
                            print_purple "Warning: this is not a directory"
                            print_empty_line
                        fi
                    fi
                done

                #
                print_empty_line
                IFS=${old_ifs}
            fi
        fi
    done
fi

# End the program by throwing error code
safe_return() {
    return ${ENVUTILS_ERROR_CODE}
}

safe_return
